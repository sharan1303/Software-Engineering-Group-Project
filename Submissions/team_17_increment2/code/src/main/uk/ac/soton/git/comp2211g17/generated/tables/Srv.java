/*
 * This file is generated by jOOQ.
 */
package uk.ac.soton.git.comp2211g17.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.soton.git.comp2211g17.generated.DefaultSchema;
import uk.ac.soton.git.comp2211g17.generated.Indexes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Srv extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>srv</code>
     */
    public static final Srv SRV = new Srv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>srv.entryDate</code>.
     */
    public final TableField<Record, LocalDateTime> ENTRYDATE = createField(DSL.name("entryDate"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>srv.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>srv.exitDate</code>.
     */
    public final TableField<Record, LocalDateTime> EXITDATE = createField(DSL.name("exitDate"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>srv.pagesViewed</code>.
     */
    public final TableField<Record, Short> PAGESVIEWED = createField(DSL.name("pagesViewed"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>srv.conversion</code>.
     */
    public final TableField<Record, Boolean> CONVERSION = createField(DSL.name("conversion"), SQLDataType.BOOLEAN, this, "");

    private Srv(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Srv(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>srv</code> table reference
     */
    public Srv(String alias) {
        this(DSL.name(alias), SRV);
    }

    /**
     * Create an aliased <code>srv</code> table reference
     */
    public Srv(Name alias) {
        this(alias, SRV);
    }

    /**
     * Create a <code>srv</code> table reference
     */
    public Srv() {
        this(DSL.name("srv"), null);
    }

    public <O extends Record> Srv(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SRV);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SRV_ID);
    }

    @Override
    public Srv as(String alias) {
        return new Srv(DSL.name(alias), this);
    }

    @Override
    public Srv as(Name alias) {
        return new Srv(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Srv rename(String name) {
        return new Srv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Srv rename(Name name) {
        return new Srv(name, null);
    }
}
