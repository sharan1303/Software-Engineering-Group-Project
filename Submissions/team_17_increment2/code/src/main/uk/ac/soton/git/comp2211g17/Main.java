/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.ac.soton.git.comp2211g17;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import javafx.util.Pair;
import uk.ac.soton.git.comp2211g17.model.files.DBFileManager;
import uk.ac.soton.git.comp2211g17.model.query.DatabaseManager;
import uk.ac.soton.git.comp2211g17.view.Utils;
import uk.ac.soton.git.comp2211g17.view.loader.LoaderWindow;
import uk.ac.soton.git.comp2211g17.view.main.MainWindow;

import java.io.File;
import java.io.IOException;

public class Main extends Application {

    private BorderPane mainWindow;
    private MainWindow mainWindowView;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Parameters args = getParameters();

        // Disable ugly subpixel antialiasing
        System.setProperty("prism.lcdtext", "false");

        // Load fonts
        Font.loadFont(getClass().getClassLoader().getResourceAsStream("font/Poppins-Regular.ttf"), 20);
        Font.loadFont(getClass().getClassLoader().getResourceAsStream("font/Poppins-Bold.ttf"), 20);

        //FilterGroupViewModel.openFilterGroup(this);

        File file = null;
        if (args.getUnnamed().size() > 0) {
            file = new File(args.getUnnamed().get(0));
        }

        // Set up database manager and file manager
        try {
            DBFileManager.openFile(file);
            DatabaseManager.setupDatabaseManager(DBFileManager.getOpenFile());
        } catch (IOException e) {
            Utils.openErrorDialog("Disk read error", "The temporary file could not be created (fatal)", e.toString());
            e.printStackTrace();
            System.exit(1);
        }

        Pair<BorderPane, FXMLLoader> res = Utils.loadFXMLWithLoader("fxml/MainWindow/MainWindow.fxml");
        mainWindow = res.getKey();
        mainWindowView = res.getValue().getController();

        Scene scene = new Scene(mainWindow);

        stage.setScene(scene);
        stage.setTitle("Ad auction management interface" + (file == null ? " - untitled" : "- " + file.getName()));

        if (!DatabaseManager.getInstance().databaseExists()) {
            LoaderWindow.openLoaderWindow(stage);
        }

        stage.show();

        stage.setOnCloseRequest(this::closeRequest);
    }

    private void closeRequest(WindowEvent windowEvent) {
        Stage stage = (Stage) mainWindow.getScene().getWindow();
        if (stage.getTitle().endsWith("*")) {
            int value = Utils.openConfirmationDialog(
                    "Confirm action",
                    "You have unsaved changes",
                    "If you leave now, your changes will be lost FOREVER",
                    "Save", "Don't save");
            switch (value) {
                case 0:
                    mainWindowView.openSaveDialog(null);
                    if (stage.getTitle().endsWith("*")) {
                        windowEvent.consume();
                    }
                    break;
                case 1: return;
                default: windowEvent.consume();
            }
        }
    }
}
