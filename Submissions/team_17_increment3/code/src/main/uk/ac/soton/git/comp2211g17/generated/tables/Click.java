/*
 * This file is generated by jOOQ.
 */
package uk.ac.soton.git.comp2211g17.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.soton.git.comp2211g17.generated.DefaultSchema;
import uk.ac.soton.git.comp2211g17.generated.Indexes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Click extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>click</code>
     */
    public static final Click CLICK = new Click();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>click.date</code>.
     */
    public final TableField<Record, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>click.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>click.clickCost</code>.
     */
    public final TableField<Record, Float> CLICKCOST = createField(DSL.name("clickCost"), SQLDataType.REAL, this, "");

    private Click(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Click(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>click</code> table reference
     */
    public Click(String alias) {
        this(DSL.name(alias), CLICK);
    }

    /**
     * Create an aliased <code>click</code> table reference
     */
    public Click(Name alias) {
        this(alias, CLICK);
    }

    /**
     * Create a <code>click</code> table reference
     */
    public Click() {
        this(DSL.name("click"), null);
    }

    public <O extends Record> Click(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CLICK);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLICK_ID);
    }

    @Override
    public Click as(String alias) {
        return new Click(DSL.name(alias), this);
    }

    @Override
    public Click as(Name alias) {
        return new Click(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Click rename(String name) {
        return new Click(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Click rename(Name name) {
        return new Click(name, null);
    }
}
