/*
 * This file is generated by jOOQ.
 */
package uk.ac.soton.git.comp2211g17.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.soton.git.comp2211g17.generated.DefaultSchema;
import uk.ac.soton.git.comp2211g17.generated.Indexes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Impr extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>impr</code>
     */
    public static final Impr IMPR = new Impr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>impr.date</code>.
     */
    public final TableField<Record, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>impr.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>impr.impressionCost</code>.
     */
    public final TableField<Record, Float> IMPRESSIONCOST = createField(DSL.name("impressionCost"), SQLDataType.REAL, this, "");

    private Impr(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Impr(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>impr</code> table reference
     */
    public Impr(String alias) {
        this(DSL.name(alias), IMPR);
    }

    /**
     * Create an aliased <code>impr</code> table reference
     */
    public Impr(Name alias) {
        this(alias, IMPR);
    }

    /**
     * Create a <code>impr</code> table reference
     */
    public Impr() {
        this(DSL.name("impr"), null);
    }

    public <O extends Record> Impr(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, IMPR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMPR_ID);
    }

    @Override
    public Impr as(String alias) {
        return new Impr(DSL.name(alias), this);
    }

    @Override
    public Impr as(Name alias) {
        return new Impr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Impr rename(String name) {
        return new Impr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Impr rename(Name name) {
        return new Impr(name, null);
    }
}
